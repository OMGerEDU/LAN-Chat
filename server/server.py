import socket
import threading
import rsa
from rsa import verify, sign, encrypt, decrypt, PublicKey, PrivateKey, pkcs1
import os
import subprocess
import tqdm


# Your path to the key generated by the server & Recieve your key 
path = os.path.dirname(os.path.abspath(__file__))
private_path =(path+'\\private_keys.text')
public_path = path =(path+'\\keys.text')

global my_socket
my_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
PORT = 8765
ADDRESS = ('192.168.239.1',PORT)
broadcast_list = []
my_socket.bind(ADDRESS)
#my_socket.bind(ADDRESS)


def accept_loop():
    while True:
        my_socket.listen()
        client, client_address = my_socket.accept()
        broadcast_list.append(client)
        start_listenning_thread(client)
        
def start_listenning_thread(client):
    client_thread = threading.Thread(
            target=listen_thread,
            args=(client,)
        )

    client_thread.start()
    
def listen_thread(client):
    privateKey = private_key_from_file(private_path)
    publicKey = public_key_from_file(public_path)
    while True:
        
        message = client.recv(4096)
        if message:
            
            Decrypt_message = rsa.decrypt(message, privateKey).decode()
            broadcast(Decrypt_message)
        else:
            print(f"client has been disconnected : {client}")
            return


def broadcast(message):
    publicKey = public_key_from_file(public_path)
    for client in broadcast_list:
        
        try:            
            print(message)
            #client.send(key.publickey().exportKey(format='PEM', passphrase=None, pkcs=1)) 

            client.send(message.encode())
            #client.send(publicKey.encode())
            
        except:
            broadcast_list.remove(client)
            print(f"Client removed : {client}")
            

def private_key_from_file(filepath):
    with open(filepath, 'rb') as f:
        pk = PrivateKey.load_pkcs1(f.read(), format='PEM')
    return pk

def public_key_from_file(filepath):
    with open(filepath, 'rb') as f:
        pk = PublicKey.load_pkcs1(f.read(), format='PEM')
       
    return pk


# In case you want fresh keys, just remove this note. 
#exec(open("rsaa.py").read())

accept_loop()





