import PySimpleGUI as sg
import os
import socket
import threading
from cryptography.fernet import Fernet
import rsa
from rsa import verify, sign, encrypt, decrypt, PublicKey, PrivateKey, pkcs1
import tqdm


def public_key_from_file(filepath):
    with open(filepath, 'rb') as f:
        pk = PublicKey.load_pkcs1(f.read(), format='PEM')
    return pk


def connect():
    global my_socket
    thread_send = threading.Thread(target=thread_welcome)
    thread_receive = threading.Thread(target=thread_receiving)
    thread_send.start()
    thread_receive.start()
    

def thread_welcome():
    global name
    global publicKey
    global my_socket
    welcome = ("\n Chat/1.0 JOIN \n Username:"+name+"\r ")
    encMessage = rsa.encrypt(welcome.encode(),publicKey)
    my_socket.send(encMessage)

def thread_sending():
    length = len(message_to_send)
                              
def thread_receiving():
    global messageFormat
    global my_socket
    while True:
    
        message = my_socket.recv(4096).decode()
        if("public key" in message):
            message = "This is public key"
        update(message,False)
        
def update(message,reset):
    global message_history
    global window
    if(reset==False):
        message_history = (message_history + message)
    else:
        message_history = ""
    
    window['-MESSAGE_TEXT-'].update(message_history)

def main():
    global my_socket
    global name
    global publicKey
    global window
    sg.theme('Dark Grey 13')
    message_history = " "
    # Your path to the key generated by the server & Recieve your key 
    path = os.path.dirname(os.path.abspath(__file__))   
    path =(path+'\\keys.text')
    publicKey = public_key_from_file(path)
    # Define your connection to the host - 
    my_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    host = "192.168.239.1"
    port = 8765
    my_socket.connect((host, port)) 
    
    # Layouts - 
    
    #### Login Layout 
    select_name = [
        [sg.Text('Enter Username'), sg.InputText()],
        [sg.Button("Enter room",enable_events=True,key='-USERNAME-')],
        ]
    #
    login_layout = [
        [sg.Column(select_name),],]
    # Join
    join_layout = [
        [sg.Button("Join",enable_events=True,key='-JOIN-')],
        
    ]
    # Chat talkbox
    
    chat_box = [
        [sg.In(size=(100,1))],
        [sg.Button("SEND",enable_events=True,key='-SEND-')],
        [sg.Button("RESET",enable_events=True,key='-RESET-')],
    ]
    message = [
        [sg.Button("EXIT",enable_events=True,key='-EXIT-')],
        [sg.Text('Welcome to our LAN-BASED chat room our messages are encrypted through RSA encryption.',key='-MESSAGE_TEXT-',size=(100,50)),]
    ]
    
    messages_Textbox = [[sg.Column(message,scrollable=True,vertical_scroll_only=True,expand_y=True)]]
    # We split those out because that's the way this GUI library works..
    after_layout = [[sg.Column(chat_box),]]
    layout = [[sg.Column(login_layout, key='-COL1-'), sg.Column(messages_Textbox,visible=False, key='-COL2-'),sg.Column(after_layout, visible=False, key='-COL3-'),sg.Column(join_layout, visible=False, key='-COL4-')],]
    #    
    window = sg.Window("title",layout,resizable=False)
    while True:
        event,values = window.read()
        if event == "-EXIT-" or event == sg.WIN_CLOSED:
            leave_message = ("\n CHAT/1.0 LEAVE \n "+"Username: "+name+". \n ")
            leave_message_encrypted = rsa.encrypt(leave_message.encode(),publicKey)
            my_socket.send(leave_message_encrypted)
            
            break
        
        if event== '-USERNAME-':
            name = values[0]
            length = len(name)
            if(length<3):
                print("please choose a longer name.")   
            else:
                window[f'-COL1-'].update(visible=False)
                window[f'-COL2-'].update(visible=True)
                window[f'-COL4-'].update(visible=True)
                #window[f'-COL3-'].update(visible=True)
                try:
                    connect()
                except:
                    print("didn't connect")
                    pass  
        if event== "-JOIN-":
                window[f'-COL4-'].update(visible=False)
                window[f'-COL3-'].update(visible=True)

        if event== "-SEND-":
            messageText = values[1]
            global messageFormat
            length = len(messageText)
            length = str(length)
            messageFormat = "\n CHAT/1.0 TEXT("+length+" letters)  "+name + ":  " + messageText
            encMessage = rsa.encrypt(messageFormat.encode(),
                         publicKey)
            my_socket.send(encMessage)
        if event== "-RESET-":
            update("message",True)                                                                                           
    window.close()

global message_history
name = " "
message_to_send ="Started"
message_history = " "



main()

